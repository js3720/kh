-- SQL01_SELECT(Basic)

--1
SELECT DEPARTMENT_NAME "학과 명", CATEGORY "계열"
FROM TB_DEPARTMENT;

--2
SELECT DEPARTMENT_NAME ||'의 정원은'|| CAPACITY ||'명 입니다.'"학과별 정원"
FROM TB_DEPARTMENT;

--3
SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE DEPARTMENT_NO = (SELECT DEPARTMENT_NO FROM TB_DEPARTMENT WHERE DEPARTMENT_NAME = '국어국문학과')
AND SUBSTR(STUDENT_SSN,8,1) IN (2,4)
AND ABSENCE_YN = 'Y';

--4
SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE STUDENT_NO IN ('A513079', 'A513090', 'A513091', 'A513110', 'A513119')
ORDER BY STUDENT_NAME DESC;

--5
SELECT DEPARTMENT_NAME, CATEGORY
FROM TB_DEPARTMENT
WHERE CAPACITY BETWEEN 20 AND 30;

--6
SELECT PROFESSOR_NAME
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO IS NULL;

--7
SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE DEPARTMENT_NO IN NULL;

--8
SELECT CLASS_NO
FROM TB_CLASS
WHERE PREATTENDING_CLASS_NO IS NOT NULL;

--9
SELECT CATEGORY
FROM TB_DEPARTMENT
GROUP BY CATEGORY;

--10
SELECT STUDENT_NO, STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE STUDENT_NO LIKE 'A2%'
AND STUDENT_ADDRESS LIKE '%전주%'
AND ABSENCE_YN ='N';

-- SQL02_SELECT(Function)

--1
SELECT STUDENT_NO"학번", STUDENT_NAME"이름", ENTRANCE_DATE"입학년도"
FROM TB_STUDENT
WHERE DEPARTMENT_NO = 002
ORDER BY ENTRANCE_DATE;

--2
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE LENGTH(PROFESSOR_NAME) !=3;

--3
SELECT PROFESSOR_NAME"교수이름", FLOOR((SYSDATE - TO_DATE('19'||SUBSTR(PROFESSOR_SSN,1,6),'YYYYMMDD'))/365)"나이"
                            -- FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(19||SUBSTR(PROFESSOR_SSN,1,6),'YYYYMMDD'))//12)"나이"
FROM TB_PROFESSOR
WHERE SUBSTR(PROFESSOR_SSN,8,1)=1
ORDER BY "나이";


--4
SELECT SUBSTR(PROFESSOR_NAME,2,LENGTH(PROFESSOR_NAME)-1)"이름"
FROM TB_PROFESSOR;

--5
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE EXTRACT(YEAR FROM ENTRANCE_DATE) - 
        EXTRACT(YEAR FROM TO_DATE(19||SUBSTR(STUDENT_SSN,1,6),'YYYYMMDD')) > 19;

--6
SELECT TO_CHAR(TO_DATE('2020-12-25'),'DAY') FROM DUAL;

--7
SELECT TO_DATE('99/10/11','YY/MM/DD') FROM DUAL; -- 2099년 10월 11일
SELECT TO_DATE('49/10/11','YY/MM/DD') FROM DUAL; -- 2049년 10월 11일
SELECT TO_DATE('99/10/11','RR/MM/DD') FROM DUAL; -- 1999년 10월 11일
SELECT TO_DATE('49/10/11','RR/MM/DD') FROM DUAL; -- 2049년 10월 11일
-- Y : 현재 세기를 나타내므로 21세기(2000년대)를 의미한다
-- R : 50이상이면 이전 세기(20세기 == 1900년대)
--     50미만이면 현재 세기(21세기 == 2000년대)를 의미한다.

--8
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE STUDENT_NO NOT LIKE 'A%';

--9
SELECT ROUND(AVG(POINT),1)"평점"
FROM TB_STUDENT
JOIN TB_GRADE USING(STUDENT_NO)
WHERE STUDENT_NO = 'A517178';

--10
SELECT DEPARTMENT_NO"학과번호", COUNT(DEPARTMENT_NO)"학생수(명)"
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY DEPARTMENT_NO;

--11
SELECT COUNT(*)
FROM TB_STUDENT
WHERE COACH_PROFESSOR_NO IS NULL;

--12
SELECT SUBSTR(TERM_NO,1,4)"년도", ROUND(AVG(POINT),1)"년도 별 평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY SUBSTR(TERM_NO,1,4)
ORDER BY SUBSTR(TERM_NO,1,4);

--13
-- 첫번째 방법으로 과의 모든 항목을 가지고있는 테이블과
-- 휴학생 수를 구한 테이블을 LEFT JOIN 시켜서 
-- 모든 컬럼값(항목)을 나오게 함
WITH "B" AS (SELECT DEPARTMENT_NO, COUNT(ROWNUM)"휴학생 수"
                    FROM TB_STUDENT
                    WHERE ABSENCE_YN = 'Y'
                    GROUP BY DEPARTMENT_NO)
SELECT DISTINCT(DEPARTMENT_NO), NVL("휴학생 수",0)
FROM TB_STUDENT "A"
JOIN "B" USING(DEPARTMENT_NO)
ORDER BY DEPARTMENT_NO;

-- 두번째 방법으로  휴학했으면 1, 안했으면 0으로 하여 합계를 구하게끔 하고,
-- GROUP BY로 DEPARTMENT_NO를 기준으로 묶어서 출력해주면
-- 모든 과목코드를 기준으로 조건에 맞는 합계값을 구할 수 있음
--                          COUNT(DECODE(ABSENCE_YN, 'Y', 'Y', 'NO',0))
--                          ->값이 있기만 하면 전부 샘하기 때문에 없는 컬럼값을 사용하여 NULL값을 넣어주어 제외시킴
SELECT DEPARTMENT_NO "학과", SUM(DECODE(ABSENCE_YN,'Y',1,0)) "휴학생 수"
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY DEPARTMENT_NO;

--14
SELECT STUDENT_NAME"동일이름", COUNT(STUDENT_NAME)"동명인 수"
FROM TB_STUDENT
GROUP BY STUDENT_NAME
HAVING COUNT(STUDENT_NAME)>1;

--15
SELECT NVL(SUBSTR(TERM_NO,1,4),' ')"년도", NVL(SUBSTR(TERM_NO,5,2),' ')"학기", ROUND(AVG(POINT),1)"평점"
FROM TB_STUDENT
JOIN TB_GRADE USING(STUDENT_NO)
WHERE STUDENT_NO = 'A112113'
GROUP BY ROLLUP(SUBSTR(TERM_NO,1,4), SUBSTR(TERM_NO,5,2))
ORDER BY SUBSTR(TERM_NO,1,4), SUBSTR(TERM_NO,5,2);

-- SQL03_SELECT(Option)

--1
SELECT STUDENT_NAME"학생 이름", STUDENT_ADDRESS"주소지"
FROM TB_STUDENT
ORDER BY STUDENT_NAME;

--2
SELECT STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE ABSENCE_YN = 'Y'
ORDER BY STUDENT_SSN DESC;

--3
SELECT STUDENT_NAME"학생이름", STUDENT_NO"학번", STUDENT_ADDRESS"거주지 주소"
FROM TB_STUDENT
WHERE (STUDENT_ADDRESS LIKE '%강원도%'OR STUDENT_ADDRESS LIKE '%경기도%')
AND STUDENT_NO NOT LIKE 'A%'
ORDER BY STUDENT_NAME;

--4
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO = (SELECT DEPARTMENT_NO FROM TB_DEPARTMENT WHERE DEPARTMENT_NAME = '법학과')
ORDER BY PROFESSOR_SSN;

--5
SELECT STUDENT_NO"학번", TO_CHAR(AVG(POINT),'0.00')"학점"
FROM TB_GRADE
WHERE CLASS_NO = 'C3118100'
AND TERM_NO ='200402'
GROUP BY STUDENT_NO
ORDER BY 2 DESC;

--6
SELECT STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME
FROM TB_STUDENT
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
ORDER BY STUDENT_NAME;

--7
SELECT CLASS_NAME, DEPARTMENT_NAME
FROM TB_CLASS
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO);

--8
-- TB_CLASS_PROFESSOR : 과목별 교수의 정보를 저장한 테이블 (과목코드, 학과코드)
SELECT CLASS_NAME,PROFESSOR_NAME 
FROM TB_CLASS
JOIN TB_CLASS_PROFESSOR USING(CLASS_NO)
JOIN TB_PROFESSOR USING(PROFESSOR_NO);
-- TB_CLASS와 TB_PROFESSOR 테이블이 공통으로
-- DEPARTMENT_NO 컬럼을 가지고 있다 해서 이를 이용해서 JOIN을 하면 안됨!
--> 이럴 경우 
--  TB_CLASS의 DEPARTMENT_NO와
--  TB_PROFESSOR의 DEPARTMENT_NO컬럼 값들이
--  서로 연결되기 위한 모든 경우의 수를 만들어냄 (곱집합이 되어버림)

SELECT CLASS_NAME, PROFESSOR_NAME
FROM TB_CLASS"C", TB_CLASS_PROFESSOR"CP", TB_PROFESSOR"P"
WHERE C.CLASS_NO = CP.CLASS_NO
AND CP.PROFESSOR_NO = P.PROFESSOR_NO;

--9
SELECT CLASS_NAME, PROFESSOR_NAME 
FROM TB_CLASS
JOIN TB_CLASS_PROFESSOR USING(CLASS_NO)
JOIN TB_PROFESSOR"P" USING(PROFESSOR_NO)
JOIN TB_DEPARTMENT"D" ON (P.DEPARTMENT_NO = D.DEPARTMENT_NO)
WHERE CATEGORY = '인문사회';

SELECT CLASS_NAME, PROFESSOR_NAME
FROM TB_CLASS"C", TB_CLASS_PROFESSOR"CP", TB_PROFESSOR"P", TB_DEPARTMENT"D"
WHERE C.CLASS_NO = CP.CLASS_NO
AND CP.PROFESSOR_NO = P.PROFESSOR_NO
AND P.DEPARTMENT_NO = D.DEPARTMENT_NO
AND CATEGORY = '인문사회';

--10
SELECT STUDENT_NO"학번", STUDENT_NAME"학생 이름", ROUND(AVG(POINT),1)"전체 평점"
FROM TB_STUDENT
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
JOIN TB_GRADE USING(STUDENT_NO)
WHERE DEPARTMENT_NAME = '음악학과'
GROUP BY STUDENT_NO, STUDENT_NAME
ORDER BY STUDENT_NO;

--11
SELECT DEPARTMENT_NAME"학과이름", STUDENT_NAME"학생이름", PROFESSOR_NAME"지도교수이름"
FROM TB_STUDENT
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
JOIN TB_PROFESSOR ON(COACH_PROFESSOR_NO = PROFESSOR_NO)
WHERE STUDENT_NO = 'A313047';

--12
SELECT STUDENT_NAME, TERM_NO
FROM TB_GRADE
JOIN TB_CLASS USING(CLASS_NO)
JOIN TB_STUDENT USING(STUDENT_NO)
WHERE TERM_NO LIKE '2007%'
AND CLASS_NAME = '인간관계론';

--13
SELECT CLASS_NAME, DEPARTMENT_NAME
FROM TB_DEPARTMENT
JOIN TB_CLASS"C" USING(DEPARTMENT_NO)
WHERE CATEGORY = '예체능'
AND C.CLASS_NO NOT IN (SELECT P.CLASS_NO FROM TB_CLASS_PROFESSOR"P");

--14
SELECT STUDENT_NAME"학생이름", NVL(PROFESSOR_NAME,'지도교수 미지정')"지도교수"
FROM TB_STUDENT
LEFT JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
LEFT JOIN TB_PROFESSOR ON(COACH_PROFESSOR_NO = PROFESSOR_NO)
WHERE DEPARTMENT_NAME ='서반아어학과'
ORDER BY STUDENT_NO;

--15
SELECT STUDENT_NO"학번", STUDENT_NAME"이름", DEPARTMENT_NAME"학과 이름", ROUND(AVG(POINT),8)"평점"
FROM TB_STUDENT
LEFT JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
LEFT JOIN TB_GRADE USING(STUDENT_NO)
WHERE ABSENCE_YN = 'N'
GROUP BY STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME
HAVING AVG(POINT) >= 4.0
ORDER BY STUDENT_NO;

--16
SELECT CLASS_NO, CLASS_NAME, AVG(POINT)
FROM TB_CLASS
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
JOIN TB_GRADE USING(CLASS_NO)
WHERE DEPARTMENT_NAME = '환경조경학과'
AND CLASS_TYPE LIKE '전공%'
GROUP BY CLASS_NO, CLASS_NAME
ORDER BY CLASS_NO;

--17
SELECT STUDENT_NAME, STUDENT_ADDRESS
FROM TB_STUDENT
WHERE DEPARTMENT_NO = (SELECT DEPARTMENT_NO
                        FROM TB_STUDENT
                        WHERE STUDENT_NAME = '최경희');

--18
SELECT STUDENT_NO, STUDENT_NAME
FROM (SELECT STUDENT_NO, STUDENT_NAME 
    FROM TB_STUDENT
    JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
    JOIN TB_GRADE USING(STUDENT_NO)
    WHERE DEPARTMENT_NAME = '국어국문학과'
    GROUP BY STUDENT_NO, STUDENT_NAME
    ORDER BY AVG(POINT) DESC)
WHERE ROWNUM = 1;

--19
SELECT DEPARTMENT_NAME"계열 학과명",  ROUND(AVG(POINT),1)"전공평점"
FROM TB_DEPARTMENT
JOIN TB_CLASS USING(DEPARTMENT_NO)
JOIN TB_GRADE USING(CLASS_NO)
WHERE CATEGORY =(SELECT CATEGORY FROM TB_DEPARTMENT WHERE DEPARTMENT_NAME ='환경조경학과')
GROUP BY DEPARTMENT_NAME
ORDER BY DEPARTMENT_NAME;
